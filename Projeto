CODIGO EM PYTHON

import matplotlib.pyplot as plt
import numpy as np
import serial

# Cria um arquivo do tipo csv
#arquivo = "logger.csv"

# Abre o arquivo criado
#file = open(arquivo, "a")

# inicia a conexão com a porta serial com a chamada ao método serial.Serial()
s = serial.Serial('COM5', 9600)

# Usa o comando plt da biblioteca matplotlib para criar uma figura e mostra ela na tela
plt.close('all')
plt.figure()
plt.ion()
plt.show()

# Usa o comando np da biblioteca numpy para criar um vetor
distancia = np.array([])
vasao = np.array([])

i = 0

while True:
    a = s.readline()  # Ler o que esta sendo recebido na porta serial
    a.decode()
    b = float(a[0:4])  # Converte os valores lidos para float
    if i == 0:
        distancia = np.append(distancia, b)
    if i == 1:
        vasao = np.append(vasao, b)
    if i % 2 == 0:
        distancia= np.append(distancia, b)  # salva os dados lidos no vetor data
    if i %2 == 1:
        vasao = np.append(vasao, b)
    # Utiliza a biblioteca matplotlib para editar a figura anterioremente criada e acrescentar todos os novos dados que surgirem
    plt.cla()

    plt.title('Análise gráfica - Sensor SHARP 2Y0A21')
    plt.grid(True)
    plt.xlabel(' Vasão [L/h]')
    plt.ylabel('Tempo [s]')
    plt.subplot(1, 2, 1)
    plt.title('Análise gráfica - Sensor de vasão')
    plt.grid(True)
    plt.xlabel('  [L/h]')
    plt.xlabel(' Distancia [cm]')
    plt.ylabel('Tempo [s]')
    plt.plot(distancia, color="r")
    plt.subplot(1, 2, 2)
    plt.plot(vasao, color="g")
    plt.pause(0.01)
    i += 1

# Encerra a conexão com a porta Serial
s.close()



CODIGO ARDUINO


//Carrega a biblioteca do sensor ultrassonico
#include <Ultrasonic.h>
#include <LiquidCrystal.h>
//Coded and Tested By:
// Sheekar Banerjee, AI-ML-IOT Solution Engineer and Researcher

/*
Arduino Water flow meter
YF- S201 Hall Effect Water Flow Sensor
Water Flow Sensor output processed to read in litres/hour
*/
#define pino_trigger 4
#define pino_echo 5

Ultrasonic ultrasonic(pino_trigger, pino_echo);

volatile int flow_frequency; // Measures flow sensor pulses
unsigned int l_hour; // Calculated litres/hour
unsigned char flowsensor = 2; // Sensor Input
unsigned long currentTime;
unsigned long cloopTime;

void flow () // Interrupt function
{
flow_frequency++;
}

void setup()
{
pinMode(flowsensor, INPUT);
digitalWrite(flowsensor, HIGH); // Optional Internal Pull-Up
Serial.begin(9600);
attachInterrupt(0, flow, RISING); // Setup Interrupt
 sei(); // Enable interrupts
currentTime = millis();
cloopTime = currentTime;
}

void loop ()
{  
  float cmMsec;
  long microsec = ultrasonic.timing();
  cmMsec = ultrasonic.convert(microsec, Ultrasonic::CM);
  //Exibe informacoes no serial monitor
  //Serial.print("#");
  Serial.println(cmMsec);

 // Pulse frequency (Hz) = 7.5Q, Q is flow rate in L/min.
 l_hour = (flow_frequency * 60 / 7.5);
 // (Pulse frequency x 60 min) / 7.5Q = flowrate in L/hour

 flow_frequency = 0; // Reset Counter
 //Serial.print("&");
 Serial.println(l_hour, DEC); // Print litres/hour
 delay(1000);
}





CODIGO EM PYTHON ATUALIZADO
import matplotlib.pyplot as plt
import numpy as np
import serial

# Cria um arquivo do tipo csv
#arquivo = "logger.csv"

# Abre o arquivo criado
#file = open(arquivo, "a")

# inicia a conexão com a porta serial com a chamada ao método serial.Serial()
s = serial.Serial('COM5', 9600)

# Usa o comando plt da biblioteca matplotlib para criar uma figura e mostra ela na tela
plt.close('all')
plt.figure()
plt.ion()
plt.show()

# Usa o comando np da biblioteca numpy para criar um vetor
distancia = np.array([])
vasao = np.array([])

i = 0

while True:
    '''a = s.readline()  # Ler o que esta sendo recebido na porta serial
    a.decode()'''

    a = s.readline()  # read a byte string
    string_n = a.decode('utf-8').strip()  # decode byte string into Unicode
    string = string_n.rstrip()  # remove \n and \r

    print(string)
    if string[0] == "#":
        string = string[1:len(a)]
        b = float(string[0:4])  # Converte os valores lidos para float
        distancia = np.append(distancia, b)
    if string[0] == "&":
        string = string[1:len(a)]
        b = float(string[0:4])  # Converte os valores lidos para float
        vasao = np.append(vasao, b)

    '''print(distancia)
    print(vasao)'''
    # Utiliza a biblioteca matplotlib para editar a figura anterioremente criada e acrescentar todos os novos dados que surgirem
    plt.cla()
    plt.title('Análise gráfica - Sensor SHARP 2Y0A21')
    plt.grid(True)
    plt.xlabel(' Vasão [L/h]')
    plt.ylabel('Tempo [s]')
    plt.subplot(1, 2, 1)
    plt.title('Análise gráfica - Sensor de vasão')
    plt.grid(True)
    plt.xlabel('  [L/h]')
    plt.xlabel(' Distancia [cm]')
    plt.ylabel('Tempo [s]')
    plt.plot(distancia, color="r")
    plt.subplot(1, 2, 2)
    plt.plot(vasao, color="g")
    plt.pause(0.01)
    i += 1

# Encerra a conexão com a porta Serial
s.close()
