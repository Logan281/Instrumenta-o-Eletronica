CODIGO EM PYTHON

import matplotlib.pyplot as plt
import numpy as np
import serial

# Cria um arquivo do tipo csv
#arquivo = "logger.csv"

# Abre o arquivo criado
#file = open(arquivo, "a")

# inicia a conexão com a porta serial com a chamada ao método serial.Serial()
s = serial.Serial('COM5', 9600)

# Usa o comando plt da biblioteca matplotlib para criar uma figura e mostra ela na tela
plt.close('all')
plt.figure()
plt.ion()
plt.show()

# Usa o comando np da biblioteca numpy para criar um vetor
distancia = np.array([])
vasao = np.array([])

i = 0

while True:
    a = s.readline()  # Ler o que esta sendo recebido na porta serial
    a.decode()
    b = float(a[0:4])  # Converte os valores lidos para float
    if i == 0:
        distancia = np.append(distancia, b)
    if i == 1:
        vasao = np.append(vasao, b)
    if i % 2 == 0:
        distancia= np.append(distancia, b)  # salva os dados lidos no vetor data
    if i %2 == 1:
        vasao = np.append(vasao, b)
    # Utiliza a biblioteca matplotlib para editar a figura anterioremente criada e acrescentar todos os novos dados que surgirem
    plt.cla()

    plt.title('Análise gráfica - Sensor SHARP 2Y0A21')
    plt.grid(True)
    plt.xlabel(' Vasão [L/h]')
    plt.ylabel('Tempo [s]')
    plt.subplot(1, 2, 1)
    plt.title('Análise gráfica - Sensor de vasão')
    plt.grid(True)
    plt.xlabel('  [L/h]')
    plt.xlabel(' Distancia [cm]')
    plt.ylabel('Tempo [s]')
    plt.plot(distancia, color="r")
    plt.subplot(1, 2, 2)
    plt.plot(vasao, color="g")
    plt.pause(0.01)
    i += 1

# Encerra a conexão com a porta Serial
s.close()



CODIGO ARDUINO


//Carrega a biblioteca do sensor ultrassonico
#include <Ultrasonic.h>
#include <LiquidCrystal.h>
//Coded and Tested By:
// Sheekar Banerjee, AI-ML-IOT Solution Engineer and Researcher

/*
Arduino Water flow meter
YF- S201 Hall Effect Water Flow Sensor
Water Flow Sensor output processed to read in litres/hour
*/
#define pino_trigger 4
#define pino_echo 5

Ultrasonic ultrasonic(pino_trigger, pino_echo);

volatile int flow_frequency; // Measures flow sensor pulses
unsigned int l_hour; // Calculated litres/hour
unsigned char flowsensor = 2; // Sensor Input
unsigned long currentTime;
unsigned long cloopTime;

void flow () // Interrupt function
{
flow_frequency++;
}

void setup()
{
pinMode(flowsensor, INPUT);
digitalWrite(flowsensor, HIGH); // Optional Internal Pull-Up
Serial.begin(9600);
attachInterrupt(0, flow, RISING); // Setup Interrupt
 sei(); // Enable interrupts
currentTime = millis();
cloopTime = currentTime;
}

void loop ()
{  
  float cmMsec;
  long microsec = ultrasonic.timing();
  cmMsec = ultrasonic.convert(microsec, Ultrasonic::CM);
  //Exibe informacoes no serial monitor
  //Serial.print("#");
  Serial.println(cmMsec);

 // Pulse frequency (Hz) = 7.5Q, Q is flow rate in L/min.
 l_hour = (flow_frequency * 60 / 7.5);
 // (Pulse frequency x 60 min) / 7.5Q = flowrate in L/hour

 flow_frequency = 0; // Reset Counter
 //Serial.print("&");
 Serial.println(l_hour, DEC); // Print litres/hour
 delay(1000);
}





CODIGO EM PYTHON ATUALIZADO
import matplotlib.pyplot as plt
import numpy as np
import serial

# Cria um arquivo do tipo csv
#arquivo = "logger.csv"

# Abre o arquivo criado
#file = open(arquivo, "a")

# inicia a conexão com a porta serial com a chamada ao método serial.Serial()
s = serial.Serial('COM5', 9600)

# Usa o comando plt da biblioteca matplotlib para criar uma figura e mostra ela na tela
plt.close('all')
plt.figure()
plt.ion()
plt.show()

# Usa o comando np da biblioteca numpy para criar um vetor
distancia = np.array([])
vasao = np.array([])

i = 0

while True:
    '''a = s.readline()  # Ler o que esta sendo recebido na porta serial
    a.decode()'''

    a = s.readline()  # read a byte string
    string_n = a.decode('utf-8').strip()  # decode byte string into Unicode
    string = string_n.rstrip()  # remove \n and \r

    print(string)
    if string[0] == "#":
        string = string[1:len(a)]
        b = float(string[0:4])  # Converte os valores lidos para float
        distancia = np.append(distancia, b)
    if string[0] == "&":
        string = string[1:len(a)]
        b = float(string[0:4])  # Converte os valores lidos para float
        vasao = np.append(vasao, b)

    '''print(distancia)
    print(vasao)'''
    # Utiliza a biblioteca matplotlib para editar a figura anterioremente criada e acrescentar todos os novos dados que surgirem
    plt.cla()
    plt.title('Análise gráfica - Sensor SHARP 2Y0A21')
    plt.grid(True)
    plt.xlabel(' Vasão [L/h]')
    plt.ylabel('Tempo [s]')
    plt.subplot(1, 2, 1)
    plt.title('Análise gráfica - Sensor de vasão')
    plt.grid(True)
    plt.xlabel('  [L/h]')
    plt.xlabel(' Distancia [cm]')
    plt.ylabel('Tempo [s]')
    plt.plot(distancia, color="r")
    plt.subplot(1, 2, 2)
    plt.plot(vasao, color="g")
    plt.pause(0.01)
    i += 1

# Encerra a conexão com a porta Serial
s.close()


CODIGO DO ARDUINO COM PONTE H, VASÃO E DISTANCIA
//Carrega a biblioteca do sensor ultrassonico
#include <Ultrasonic.h>
#include <LiquidCrystal.h>
//Coded and Tested By:
// Sheekar Banerjee, AI-ML-IOT Solution Engineer and Researcher

/*
Arduino Water flow meter
YF- S201 Hall Effect Water Flow Sensor
Water Flow Sensor output processed to read in litres/hour
*/
#define pino_trigger 4
#define pino_echo 5

Ultrasonic ultrasonic(pino_trigger, pino_echo);

volatile int flow_frequency; // Measures flow sensor pulses
unsigned int l_hour; // Calculated litres/hour
unsigned char flowsensor = 3; // Sensor Input
unsigned long currentTime;
unsigned long cloopTime;

const int led1 = 13 ;
const int led2 = 12;// o led esta ligado ao pino 09
const int button = 2;   // o botao esta ligado ao pino 02
 
boolean lastButton = LOW;     // variavel que guarda o ultimo estado do botao (até porque comecamos com o botao sempre em LOW via resistor PULL-DOWN)
boolean currentButton = LOW;    // variavel contendo o atual estado do botao (e ainda utilizamos aqui um resistor pull-down)
boolean ledOn = false;      // o atual estado do led (on/off) (o led começa em OFF porque o button começa em LOW) PS: (FALSE = LOW = 0)

void flow () // Interrupt function
{
flow_frequency++;
}

void setup()
{
  pinMode(led1, OUTPUT);     // configura o pino do led como saida
  pinMode(button, INPUT);   // configura o pino do botao como entrada (não é obrigatório pois por padrão os pinos são configurados como ENTRADA)
  pinMode(led2, OUTPUT);
  pinMode(flowsensor, INPUT);
  digitalWrite(flowsensor, HIGH); // Optional Internal Pull-Up
  Serial.begin(9600);
  attachInterrupt(0, flow, RISING); // Setup Interrupt
  sei(); // Enable interrupts 
}
boolean debounce(boolean last)
  {
    boolean current = digitalRead(button);      // le o estado atual do botao
    
    if(last != current)
    {
      delay(3);     // espera 3ms --> AQUI VAI O "SEGREDO" DO "EFETIVO E SEGURO, ALÉM DE RÁPIDO DEBOUNCING"
      current = digitalRead(button);      // le NOVAMENTE o estado do botao apos o "debounce"  
    }
    return current;     // retorna o valor atualizado do botao (button)
  }
void loop ()
{  
  float cmMsec;
  long microsec = ultrasonic.timing();
  cmMsec = ultrasonic.convert(microsec, Ultrasonic::CM);
  //Exibe informacoes no serial monitor
  //Serial.print("#");
  Serial.println(cmMsec);

 // Pulse frequency (Hz) = 7.5Q, Q is flow rate in L/min.
 l_hour = (flow_frequency * 60 / 7.5);
 // (Pulse frequency x 60 min) / 7.5Q = flowrate in L/hour

 flow_frequency = 0; // Reset Counter
 //Serial.print("&");
 Serial.println(l_hour, DEC); // Print litres/hour
 digitalWrite(led1, HIGH);
  currentButton = debounce(lastButton);     // Lê o estado do botao após o debounce
                                            // aqui passamos pela FUNÇÃO "debounce"
                                            // ANTES de podermos OBTER o VALOR FINAL
                                            // do ATUAL ESTADO DO BOTÃO! (R.Costa.)
 
    if(lastButton == LOW && currentButton == HIGH)      // se o botao foi PRESSIONADO
    {
      
      ledOn = !ledOn;     // alternamos o valor do LED
    }
    
    lastButton = currentButton;     // redefinimos o valor do botao
 
    digitalWrite(led2, ledOn);     // alternamos o estado do led
    /*bool estadoLed2 = digitalRead(led2);
    if(estadoLed2 == HIGH){
      Serial.println("Motor Desligado");
      delay(1000);
    }
    if(estadoLed2 == LOW){
      Serial.println("Motor Ligado");
      delay(1000);
    }*/
 delay(1000);
}
